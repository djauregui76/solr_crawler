<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xml>
<!-- 
   Copyright 2010-2017 Norconex Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<httpcollector id="UCDAVIS HTTP Collector">
 <!-- Variables: Optionally define variables in this configuration file
       using the "set" directive, or by using a file of the same name
       but with the filterExtension ".variables" or ".properties".  Refer 
       to site documentation to find out what each filterExtension does.
       Finally, once can pass an optional properties file when starting the
       crawler.  The following is good practice to reference frequently 
       used classes in a shorter way.
       -->
	   <!-- URL to index -->
	   #set($site_index1	= "https://health.ucdavis.edu/community_relations/pdf/Community-Health-Needs-Assessment.pdf")
	   <!-- URL to index second site -->
	   #set($site_index2	= "https://hr.ucdavis.edu")
	   <!-- Collection created in solar where to store documents -->
	   #set($collection_solr	="http://localhost:8983/solr/test6")







  <!-- Decide where to store generated files. -->
  <progressDir>./examples-output/minimum/progress</progressDir>
  <logsDir>./examples-output/minimum/logs</logsDir>

  <crawlers>
    <crawler id="Norconex Minimum Test Page">

      <!-- Requires at least one start URL (or urlsFile). 
           Optionally limit crawling to same protocol/domain/port as 
           start URLs. -->
      <startURLs stayOnDomain="true" stayOnPort="true" stayOnProtocol="true">
        <url>$site_index1</url>
		<!--url>$site_index2</url-->
      </startURLs>
      
	  <!-- Optional URL normalization feature. The class must implement
         com.norconex.collector.http.url.IURLNormalizer, 
         like the following class does. This is in order to avoid duplicates pages
      -->
	  <urlNormalizer class="com.norconex.collector.http.url.impl.GenericURLNormalizer">
            <normalizations>lowerCaseSchemeHost, upperCaseEscapeSequence, decodeUnreservedCharacters, removeDefaultPort, removeFragment, removeDotSegments, addTrailingSlash, removeDuplicateSlashes, removeSessionIds, upperCaseEscapeSequence</normalizations> 
			<replacements>
				<replace>
					<match>&amp;view=print</match>
					<replacement>&amp;view=html</replacement>
				</replace>
			</replacements>
      </urlNormalizer>
	  <!-- Optionally filter URL BEFORE any download. Classes must implement 
         com.norconex.collector.core.filter.IReferenceFilter, 
         like the following examples.
         -->
    <referenceFilters>
        <!-- Exclude images, CSS and JS files -->
      <filter class="com.norconex.collector.core.filter.impl.ExtensionReferenceFilter" onMatch="exclude" caseSensitive="false">jpg,jpeg,gif,png,ico,css,js,svg</filter>
      <!-- Exclude dynamic pages containing a query (?) -->
      <filter class="com.norconex.collector.core.filter.impl.RegexReferenceFilter" onMatch="exclude" caseSensitive="true">.+\?.*</filter>
    </referenceFilters>
	  
      <!-- === Recommendations: ============================================ -->

      <!-- Specify a crawler default directory where to generate files. -->
      <workDir>./examples-output/minimum</workDir>

      <!-- Put a maximum depth to avoid infinite crawling (e.g. calendars). -->
      <maxDepth>1</maxDepth>

      <!-- We know we don't want to crawl the entire site, so ignore sitemap. -->
      <sitemapResolverFactory ignore="true" />
	  
	  <!-- Fetch a URL HTTP Headers.  Classes must implement
         com.norconex.collector.http.fetch.IHttpMetadataFetcher.  
         The following is a simple implementation.
         -->
      <metadataFetcher class="com.norconex.collector.http.fetch.impl.GenericMetadataFetcher">
		<validStatusCodes>200</validStatusCodes>
	  </metadataFetcher>

      <!-- Optionally filter AFTER download of HTTP headers.  Classes must 
         implement com.norconex.collector.core.filter.IMetadataFilter.  
         -->
      <metadataFilters>
		<!-- Do not index content-type of CSS or JavaScript -->
		<filter class="com.norconex.collector.core.filter.impl.RegexMetadataFilter" onMatch="exclude" caseSensitive="false" field="Content-Type">.*css.*|.*javascript.*|.*svg.*</filter>
	  </metadataFilters>        

      <!-- Be as nice as you can to sites you crawl. -->
      <delay default="1000" />
      
      <!-- Document importing -->
      <importer>
	  
	
	<preParseHandlers>
                <!-- If your target repository does not support arbitrary fields,
           make sure you only keep the fields you need. -->
		         <tagger class="com.norconex.importer.handler.tagger.impl.DocumentLengthTagger" field="document.size.preparse" />
				
                 <tagger class="com.norconex.importer.handler.tagger.impl.RenameTagger">
                    <rename fromField="document.contentEncoding" toField="content_encoding" overwrite="true"/>
                    <rename fromField="document.contentType" toField="content_type" overwrite="true"/>
                    <rename fromField="CONTENT" toField="contentClean" overwrite="true"/>
					<rename fromField="text" toField="text_content" overwrite="true"/>
                </tagger> 
                <tagger class="com.norconex.importer.handler.tagger.impl.DebugTagger" logLevel="DEBUG"/>
				
      
    </preParseHandlers>
	  
	  
    <postParseHandlers>
		<!--transformer class="com.norconex.importer.handler.transformer.impl.ReduceConsecutivesTransformer" caseSensitive="true">
          <reduce>\s</reduce>
          <reduce>\n</reduce>
          <reduce>\r</reduce>
          <reduce>\t</reduce>
          <reduce>\n\r</reduce>
          <reduce>\r\n</reduce>
          <reduce>\s\n</reduce>
          <reduce>\s\r</reduce>
          <reduce>\s\r\n</reduce>
          <reduce>\s\n\r</reduce>
        </transformer-->
		
		<tagger class="com.norconex.importer.handler.tagger.impl.DocumentLengthTagger" field="document.size.postparse" />
        <!-- Reject small documents (<100 Bytes)-->
                <filter class="com.norconex.importer.handler.filter.impl.NumericMetadataFilter" onMatch="exclude" field="document.size.postparse" >
                <condition operator="lt" number="100" />
                </filter>
		
		<!-- Rename fields -->
        <tagger class="com.norconex.importer.handler.tagger.impl.RenameTagger">
           <rename fromField="document.size.postparse" toField="document_length" overwrite="true" />
        </tagger>
		
		<tagger class="com.norconex.importer.handler.tagger.impl.DeleteTagger">
            <fields>document.size.postparse</fields>
        </tagger>
		
		<tagger class="com.norconex.importer.handler.tagger.impl.DateFormatTagger"
          fromField="last-modified"
          toField="lastmodified" 
          toFormat="yyyyMMdd" >
           <fromFormat>yyyyMMdd</fromFormat>
        </tagger>
  
				<tagger class="com.norconex.importer.handler.tagger.impl.ReplaceTagger">
          <replace fromField="title" replaceAll="true" regex="true" caseSensitive="false">
              <fromValue>[ \t\r\n]{2,}</fromValue>
              <toValue xml:space="preserve"> </toValue>
          </replace>
      </tagger>
	   
	    <tagger class="com.norconex.importer.handler.tagger.impl.ScriptTagger">
			<script><![CDATA[
				var objectnoexist=null;
				objectnoexist=metadata.getString('title');
				var str = "";
				if(typeof(objectnoexist)=='undefined' || objectnoexist == null ) {
				str=metadata.getString('document.reference');
				
				var n = str.lastIndexOf("/");
				var l = str.lastIndexOf(".");
				var ti = str.substring(n+1,l);
				metadata.setString('title',ti); 
				} 
			]]></script>
		</tagger>
		  
      
          <!-- If your target repository does not support arbitrary fields,
               make sure you only keep the fields you need. -->
          <tagger class="com.norconex.importer.handler.tagger.impl.KeepOnlyTagger">
            <fields>title,keywords,description,document.reference,text_content,contentClean,content_encoding,content_type,copyright,author,document_length,lastmodified</fields>
          </tagger>
		  
        </postParseHandlers>
		
      </importer> 
      
      <!-- Decide what to do with your files by specifying a Committer. -->
	  <committer class="com.norconex.committer.core.impl.MultiCommitter">
		
		<committer class="com.norconex.committer.core.impl.FileSystemCommitter">
			<directory>./examples-output/minimum/crawledFiles</directory>
        </committer>
		<committer class="com.norconex.committer.solr.SolrCommitter">
			<solrURL>$collection_solr</solrURL>
			<sourceReferenceField keep="false">document.reference</sourceReferenceField>
			<targetReferenceField>id</targetReferenceField>
			<targetContentField>text_content</targetContentField>
			<commitBatchSize>10</commitBatchSize>
			<queueDir>/optional/queue/path/</queueDir>
			<queueSize>100</queueSize>
			<maxRetries>2</maxRetries>
			<maxRetryWait>5000</maxRetryWait>
		</committer>
	  </committer>
    </crawler>
  </crawlers>

</httpcollector>